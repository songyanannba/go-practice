/// PB协议定义
/// Neo

syntax = "proto3";
package protocols;
option go_package = "../protocols";

//通用错误
enum Code {
  CodeUnknown = 0; //未知
  CodeOk = 1; //成功
  CodeParameterError = 401; //参数错误
  CodeSystemError = 402; //系统错误
  CodeNotExists = 404; //不存在
  CodeExists = 403; //已存在
}

//服务类型
enum ServiceType {
  ServiceTypeUnknown = 0; //未知
  ServiceTypeAdminBackend = 1; //管理后台
  ServiceTypeGame = 2; //游戏
}

//消息类型
enum MessageType {
  MessageTypeUnknown = 0; //未知
  MessageTypeAddUserRequest = 1; //大厅添加用户请求
  MessageTypeAddUserResponse = 2; //大厅添加用户响应
  MessageTypeKickOutUserRequest = 3; //大厅踢人请求
  MessageTypeKickOutUserResponse = 4; //大厅踢人响应
  MessageTypeUpdateGameRequest = 5; //大厅更新游戏请求
  MessageTypeUpdateGameResponse = 6; //大厅更新游戏响应
  MessageTypeBackendAddUserRequest = 7; //后端添加用户请求
  MessageTypeBackendAddUserResponse = 8; //后端添加用户响应
  MessageTypeBackendUserTodayGamePlatformReportRequest = 9; //后端用户今日游戏平台报表请求
  MessageTypeBackendUserTodayGamePlatformReportResponse = 10; //后端用户今日游戏平台报表响应
  MessageTypeBackendUpdateUserRebateAmountRequest = 11; //后端更新用户洗码请求
  MessageTypeBackendUpdateUserRebateAmountResponse = 12; //后端更新用户洗码响应
  MessageTypeBackendUpdateUserVIPLotteryRequest = 13; //后端更新VIP礼金请求
  MessageTypeBackendUpdateUserVIPLotteryResponse = 14; //后端更新VIP礼金响应
  MessageTypeBackendWithCommissionRequest = 15; //后端更新领取佣金请求
  MessageTypeBackendWithCommissionResponse = 16; //后端更新领取佣金响应

  MessageTypeBackendManualDeductEventRouteRequest = 17; //后端人工充值消息路由请求
  MessageTypeBackendManualDeductEventRouteResponse = 18; //后端人工充值消息路由响应
  MessageTypeBackendPreferentialEventRouteRequest = 19; //后端优惠消息路由请求
  MessageTypeBackendPreferentialEventRouteResponse = 20; //后端优惠消息路由响应
  MessageTypeBackendUserRechargeEventRouteRequest = 21; //后端用户充值消息路由请求
  MessageTypeBackendUserRechargeEventRouteResponse = 22; //后端用户充值消息路由响应
  MessageTypeBackendUserWithdrawEventRouteRequest = 23; //后端用户提现消息路由请求
  MessageTypeBackendUserWithdrawEventRouteResponse = 24; //后端用户提现消息路由响应
  MessageTypeBackendCacheRefreshEventRouteRequest = 25; //缓存刷新请求
  MessageTypeBackendCacheRefreshEventRouteResponse = 26; //缓存刷新响应
  MessageTypeBackendRechargeNotifyRequest = 27; //充值结果通知
  MessageTypeBackendRechargeNotifyResponse = 28; //充值结果通知响应
  MessageTypeBackendRecreateAgentTreeRouteRequest = 31; //重建代理树路由请求
  MessageTypeBackendRecreateAgentTreeRouteResponse = 32; //重建代理树路由响应
  MessageTypeBackendAgentMoveRouteRequest = 33; //代理迁移路由请求
  MessageTypeBackendAgentMoveRouteResponse = 34; //代理迁移路由响应
  MessageTypeGetTodayAgentReportRequest = 35; //获取今日代理报表请求
  MessageTypeGetTodayAgentReportResponse = 36; //获取今日代理报表响应
  MessageTypeKickOutPlatformUserRequest = 37; //大厅平台踢人请求
  MessageTypeKickOutPlatformUserResponse = 38; //大厅平台踢人响应
  MessageTypeChannelEditGameRequest = 39; //渠道禁用游戏修改通知请求
  MessageTypeChannelEditGameResponse = 40; //渠道禁用游戏修改通知相应
  MessageTypeAgentModeChangeRequest = 41; //用户代理模式变更通知请求
  MessageTypeAgentModeChangeResponse = 42; //用户代理模式变更通知响应
  MessageTypeBackendMissionCheckRequest = 43; //任务领取奖励请求
  MessageTypeBackendMissionCheckResponse = 44; //任务领取奖励响应
  MessageTypeBackendMissionPrizeRequest = 45; //任务奖励发放通知请求
  MessageTypeBackendMissionPrizeResponse = 46; //任务奖励发放通知相应

  //大厅自己给自己发
  MessageTypeOfflineUserRequest = 101; //顶号通知
  MessageTypeOfflineUserResponse = 102; //顶号通知响应
  MessageTypeTransferObtainRequest = 103; //成员转账到账通知
  MessageTypeTransferObtainResponse = 104; //成员转账到账通知
  MessageTypeRedpacketNotifyRequest = 105; //红包通知
  MessageTypeRedpacketNotifyResponse = 106; //红包通知

  //大厅请求后台-代理返佣相关
  MessageTypeBackendAgentCommissionPredictRequest = 201; //今日佣金预估
  MessageTypeBackendAgentCommissionPredictResponse = 202; //今日佣金预估
  MessageTypeBackendAgentCommissionSummaryRequest = 203; //佣金信息-汇总页
  MessageTypeBackendAgentCommissionSummaryResponse = 204; //佣金信息-汇总页
  MessageTypeBackendAgentCommissionDirectRequest = 205; //佣金信息-直推详情
  MessageTypeBackendAgentCommissionDirectResponse = 206; //佣金信息-直推详情
  MessageTypeBackendAgentCommissionDiffRequest = 207; //佣金信息-极差直推信息
  MessageTypeBackendAgentCommissionDiffResponse = 208; //佣金信息-极差直推信息
  MessageTypeBackendAgentInfoBetRequest = 213; //配置介绍页-代理过往业绩
  MessageTypeBackendAgentInfoBetResponse = 214; //配置介绍页-代理过往业绩
  MessageTypeBackendAgentInfoConfigRequest = 215; //极差模式返佣配置
  MessageTypeBackendAgentInfoConfigResponse = 216; //极差模式返佣配置
  MessageTypeBackendAgentModeRequest = 217; //返佣模式查询
  MessageTypeBackendAgentModeResponse = 218; //返佣模式查询
  MessageTypeBackendAgentInfoImageRequest = 219; //代理介绍图片查询
  MessageTypeBackendAgentInfoImageResponse = 220; //代理介绍图片查询
  MessageTypeBackendAgentCommissionNormalRequest = 221; //佣金信息-分销佣金详情
  MessageTypeBackendAgentCommissionNormalResponse = 222; //佣金信息-分销佣金详情
}

enum AgentModeType {
  AgentModeTypeDefault = 0;
  AgentModeTypeNormal = 1;
  AgentModeTypeStep = 2;
}

enum AgentCommissionType {
  AgentCommissionTypeDefault = 0;
  AgentCommissionTypeFiveMins = 1;
  AgentCommissionTypeDaily = 2;
  AgentCommissionTypeStepDirect = 3;
  AgentCommissionTypeStepTeam = 4;
}

//消息
message Message {
  int64 messageId = 1; //消息id
  MessageType messageType = 2; //消息类型
  bytes messageBody = 3; //消息体
}

//基本响应
message BasicResponse {
  Code code = 1; //状态码
  string message = 2; //错误消息
}

//服务注册请求
message ServiceRegisterRequest {
  ServiceType serviceType = 1; //服务类型
}

//服务注册响应
message ServiceRegisterResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//大厅添加用户请求
message AddUserRequest {
  string clientIp = 1;
  string accountName = 2;
  string password = 3;
  string upLevelUserAccountName = 4;
  string realName = 5;
  string remark = 6;
}

//大厅添加用户响应
message AddUserResponse {
  BasicResponse basicResponse = 1; //基本响应
  int64 userId = 2; //用户id
  bool ICanDoIt = 3; //可以执行这个请求
}

//后台添加用户请求
message BackendAddUserRequest {
  int64 userId = 1; //用户id
}

//后台添加用户响应
message BackendAddUserResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//踢用户下线请求
message KickOutUserRequest {
  int64 userId = 1; //用户id
}

//踢用户下线响应
message KickOutUserResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//任务审核领取请求
message MissionCheckRequest {
  int64 missionRecordId = 1; //任务记录ID
  int32 operatorId = 2; //操作人ID
}
//任务审核领取响应
message MissionCheckResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
  int64 Amount = 3; //彩金
}

//任务审核奖金通知请求
message MissionPrizeNoticeRequest {
  int64 UserId = 1; //userID
  int64 Amount = 2; //金额
  string Title = 3; //标题
}
//任务审核奖励通知相应
message MissionPrizeNoticeResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//用户当日游戏平台报表请求
message UserTodayGamePlatformReportRequest {
  int64 userId = 1; //用户id
  int32 gamePlatformType = 2; //游戏平台类别
}

//用户当日游戏平台报表响应
message UserTodayGamePlatformReportResponse {
  BasicResponse basicResponse = 1; //基础响应
  int32 betAmount = 2; //打码总额
  int32 price = 3; //派奖总额
  int32 rebate = 4; //返利总额
  bool ICanDoIt = 5; //可以执行这个请求
}

//更新用户洗码金额详情
message UpdateUserRebateAmountDetails {
  int64 userId = 1; //用户id
  int32 gamePlatformType = 2; //游戏类型
  int32 amount = 3; //总额
  int32 platformId = 4; //游戏平台
}

//更新用户洗码金额请求
message UpdateUserRebateAmountRequest {
  repeated UpdateUserRebateAmountDetails list = 1; //详情列表
}

//更新用户洗码金额响应
message UpdateUserRebateAmountResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//更新用户VIP礼金请求
message UpdateUserVIPLotteryRequest {
  int64 userId = 1; //用户id
  int32 amount = 2; //总额
}

//更新用户VIP礼金响应
message UpdateUserVIPLotteryResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//更新游戏状态请求
message UpdateGameRequest {
  int32 platformId = 1; // 平台id
  int32 gameId = 2; // 游戏id(弃用)
  repeated int64 gameIds = 3; // 游戏id列表
}

//更新游戏状态响应
message UpdateGameResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//提取佣金请求
message WithdrawCommissionRequest {
  int64 userId = 1; //用户id
  int32 amount = 2; //金额
}

//提取佣金响应
message WithdrawCommissionResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//人工扣款路由请求
message ManualDeductEventRouteRequest {
  bool errorFlag = 1; //错误标志
  int64 userId = 2; //用户id
  int32 money = 3; //金额
}

//人工扣款路由响应
message ManualDeductEventRouteResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//优惠路由请求
message PreferentialEventRouteRequest {
  int64 userId = 1; //用户id
  int32 money = 2; //金额
}

//优惠路由响应
message PreferentialEventRouteResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//用户充值路由请求
message UserRechargeEventRouteRequest {
  int64 channelId = 1; //渠道id
  string channelName = 2; //渠道名
  int64 channelCreateTimestamp = 3; //渠道创建时间戳
  int64 userId = 4; //用户id
  string userName = 5; //用户名称
  string realName = 6; //真实姓名
  int32 rechargeType = 7; //充值类型
  bool isFirst = 8; //是否首次充值
  int32 money = 9; //充值金额
}

//用户充值路由响应
message UserRechargeEventRouteResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//用户提现路由请求
message UserWithdrawEventRouteRequest {
  int64 channelId = 1; //渠道id
  string channelName = 2; //渠道名
  int64 channelCreateTimestamp = 3; //渠道创建时间戳
  int64 userId = 4; //用户id
  string userName = 5; //用户名
  string realName = 6; //真实姓名
  bool isFirst = 7; //是否首次提现
  int32 money = 8; //金额
}

//用户提现路由响应
message UserWithdrawEventRouteResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//缓存刷新请求
message CacheRefreshRequest {
  string cacheKey = 1; //缓存key
}

//缓存刷新响应
message CacheRefreshResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//顶号请求
message OfflineUserRequest {
  int64 userId = 1;
}

//顶号响应
message OfflineUserResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//充值结果通知
message BackendRechargeNotifyRequest {
  int32 userId = 1; //用户id
  int32 recordId = 2; //充值记录id
}

//充值结果通知响应
message BackendRechargeNotifyResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//重建代理树请求
message RecreateAgentTreeRequest {
}

//重建代理树响应
message RecreateAgentTreeResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//代理迁移请求
message AgentMoveRequest {
  int64 from = 1; //源节点
  int64 to = 2; //目标节点
  bool includeFrom = 3; //包含源节点
}

//代理迁移响应
message AgentMoveResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
  int32 moveResult = 3; //迁移结果
}

//获取代理报表请求
message GetAgentReportRequest {
}

//代理综合报表记录
message AgentReportEntry {
  int64 uid = 1; //用户id
  int32 agentLevel = 2; //代理层级
  int64 childrenNumber = 3; //孩子总数
  int64 totalRecharge = 4; //总充值
  int64 totalWithdraw = 5; //总提现
  int64 totalBet = 6; //总打码
  int64 totalCommission = 7; //总佣金
  int64 stepCommissionDirectAmount = 8; //直推返佣
  int64 stepCommissionTeamAmount = 9; //团队返佣
  int64 directBetAmount = 10; //直推业绩
  int64 teamBetAmount = 11; //团队业绩
  int64 registerTimestamp = 12; //注册时间戳
}

//获取代理报表响应
message GetAgentReportResponse {
  BasicResponse basicResponse = 1; //基本响应
  bool ICanDoIt = 2; //可以执行这个请求
  repeated AgentReportEntry entryList = 3; //记录列表
}

//成员转账到账通知请求
message TransferObtainRequest {
  int64 user_id = 2;
  int64 amount = 3;
  int64 from_user_id = 4;
}

message TransferObtainResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}


message RedpacketNotifyRequest {
  int32 redpacket_id = 2; //红包id
  string title = 3; //标题
  int64 start_at = 4; //开始时间
  int64 expire_at = 5; //结束时间
  repeated int32 user_ids = 6; //用户列表
}

message RedpacketNotifyResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//渠道修改禁用游戏请求
message ChannelGameEditRequest {
  repeated int64 channel_ids = 1;
}

//渠道修改禁用游戏响应
message ChannelGameEditResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//踢线下分请求
message KickOutPlatformRequest {
  int64 userId = 1; //用户ID
  string platform = 2; //平台编号
}

//踢线下分响应
message KickOutPlatformResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool ICanDoIt = 2; //可以执行这个请求
}

//今日佣金预估请求
message AgentCommissionPredictRequest {
  int64 userId = 1; //用户ID
}
//今日佣金预估响应
message AgentCommissionPredictResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  int64 commission = 3; //预估佣金金额
}

message PageInfo {
  int32 pageSize = 1; //每页条数
  int32 pageNum = 2; //页码
}

//佣金信息-汇总页请求
message AgentCommissionSummaryRequest {
  PageInfo page = 1; //分页
  int64 userId = 2; //用户ID
  int64 contributionUserId = 3; //下级贡献用户ID
}
//佣金信息-汇总页响应
message AgentCommissionSummaryResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  PageInfo page = 3; //分页
  repeated AgentCommissionSummaryItem items = 4; //数据
  int64 sumCommission = 5; //总佣金
}
message AgentCommissionSummaryItem {
  string recordNo = 1; //记录ID
  int64 createTime = 2; //结算时间
  int32 commissionType = 3; //返佣类型
  int32 categoryId = 4; //游戏类型ID
  int64 commission = 5; //所得佣金
  int32 contributes = 6; //人数
}

//佣金信息-直推详情请求
message AgentCommissionDirectRequest {
  PageInfo page = 1; //分页
  string recordNo = 2; //汇总页记录ID
  int64 userId = 3; //用户ID
  int64 directUserId = 4; //直推用户ID
}
//佣金信息-直推详情响应
message AgentCommissionDirectResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  PageInfo page = 3; //分页
  repeated AgentCommissionDirectItem items = 4; //数据
  int64 sumBet = 5; //总业绩
  int64 sumDirectBet = 6; //直推业绩
}
message AgentCommissionDirectItem {
  int64 id = 1; //记录ID
  int64 directUserId = 2; //直推成员ID
  int32 categoryId = 3; //游戏类型ID
  int32 level = 4; //代理等级
  int64 directBet = 5; //直推业绩
  int32 commissionRate = 6; //返佣比例(万分比)
  int64 commission = 7; //获得佣金
}

//佣金信息-极差直推信息
message AgentCommissionDiffRequest {
  PageInfo page = 1; //分页
  string recordNo = 2; //汇总页记录ID
  int64 userId = 3; //用户ID
  int64 directUserId = 4; //直推用户ID
}
//佣金信息-极差直推信息
message AgentCommissionDiffResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  PageInfo page = 3; //分页
  repeated AgentCommissionDiffItem items = 4; //数据
  int64 sumBet = 5; //总业绩
  int64 sumTeamBet = 6; //团队业绩
}
message AgentCommissionDiffItem {
  int64 id = 1; //记录ID
  int64 directUserId = 2; //直推成员ID
  int32 categoryId = 3; //游戏类型ID
  int32 level = 4; //代理等级
  int64 teamBet = 5; //团队业绩
  int32 commissionRate = 6; //返佣比(万分比)
  int64 commission = 7; //获得佣金
  int32 sumRate = 8; //总业绩返佣比(万分比)
  int32 teamRate = 9; //团队业绩返佣比(万分比)
}

//佣金信息-分销佣金信息
message AgentCommissionNormalRequest {
  PageInfo Page = 1;
  string recordNo = 2; //汇总页记录ID
  int64 userId = 3; //用户ID
  int64 contributionUserId = 4; //查询贡献人员ID
}
//佣金信息-分销佣金信息
message AgentCommissionNormalResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  PageInfo page = 3; //分页
  repeated AgentCommissionNormalItem items = 4; //数据
}
message AgentCommissionNormalItem {
  int64 id = 1; //记录ID
  int64 userId = 2; //成员ID
  int32 categoryId = 3; //游戏类型ID
  int32 level = 4; //代理等级
  int64 betAmount = 5; //业绩
  int64 commission = 6; //获得佣金
  int32 CommissionRate = 7; //返佣比率
}

//配置介绍页-代理过往业绩（昨日）请求
message AgentInfoBetRequest {
  int64 userId = 1; //用户ID
}
//配置介绍页-代理过往业绩（昨日）响应
message AgentInfoBetResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  repeated AgentInfoBetItem items = 3; //数据(游戏大类对应业绩额)
}
message AgentInfoBetItem {
  int32 categoryId = 1; //游戏类型ID
  int64 bet = 2; //业绩
}

//极差模式返佣配置请求
message AgentInfoConfigRequest {
}
//极差模式返佣配置响应
message AgentInfoConfigResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  repeated AgentInfoConfigItem items = 3; //数据
}
message AgentInfoConfigItem {
  int32 categoryId = 1; //游戏类型ID
  repeated AgentInfoConfigLevel list = 2; //配置信息
}
message AgentInfoConfigLevel {
  string name = 1; //级别名称
  int64 startBet = 2; //最低业绩
  int64 endBet = 3; //最大业绩
  int32 commission = 4; //每万返佣万分比
}

//用户对应返佣模式请求
message AgentModeRequest {
  int64 userId = 1; //用户ID
}
//用户对应返佣模式响应
message AgentModeResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  AgentModeType mode = 3;
}

//用户代理模式修改通知请求
message AgentModeChangeRequest {
  repeated int64 userIdList = 1; //改变的用户ID列表
  AgentModeType mode = 2; //变更后的模式类型
}
//用户代理模式修改通知响应
message AgentModeChangeResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
}

//代理介绍页-介绍图片请求
message AgentInfoImageRequest {
}
//代理介绍页-介绍图片响应
message AgentInfoImageResponse {
  BasicResponse basicResponse = 1; //基础响应
  bool iCanDoIt = 2; //可以执行这个请求
  string image_url = 3;
}

//后台服务RPC
service AdminBackendRPCService {
  //服务注册
  rpc ServiceRegister (ServiceRegisterRequest) returns (ServiceRegisterResponse) {
  }
  //添加用户服务
  rpc AddUserService (BackendAddUserRequest) returns (BackendAddUserResponse) {
  }
  //获取当日游戏平台报表数据
  rpc GetUserTodayGamePlatformReport (UserTodayGamePlatformReportRequest) returns (UserTodayGamePlatformReportResponse) {
  }
  //更新用户洗码金额
  rpc UpdateUserRebateAmount (UpdateUserRebateAmountRequest) returns (UpdateUserRebateAmountResponse) {
  }
  //更新用户VIP礼金
  rpc UpdateUserVIPLottery (UpdateUserVIPLotteryRequest) returns (UpdateUserVIPLotteryResponse) {
  }
  //提取佣金请求
  rpc WithdrawCommission (WithdrawCommissionRequest) returns (WithdrawCommissionResponse) {
  }

  //今日佣金预估
  rpc AgentCommissionPredict (AgentCommissionPredictRequest) returns (AgentCommissionPredictResponse) {
  }
  //佣金信息-汇总页
  rpc AgentCommissionSummary (AgentCommissionSummaryRequest) returns (AgentCommissionSummaryResponse) {
  }
  //佣金信息-直推详情
  rpc AgentCommissionDirect (AgentCommissionDirectRequest) returns (AgentCommissionDirectResponse) {
  }
  //佣金信息-极差直推信息
  rpc AgentCommissionDiff (AgentCommissionDiffRequest) returns (AgentCommissionDiffResponse) {
  }
  //佣金信息-分销佣金详情
  rpc AgentCommissionNormal (AgentCommissionNormalRequest) returns (AgentCommissionNormalResponse) {

  }
  //配置介绍页-代理过往业绩
  rpc AgentInfoBet (AgentInfoBetRequest) returns (AgentInfoBetResponse) {
  }
  //极差模式返佣配置
  rpc AgentInfoConfig (AgentInfoConfigRequest) returns (AgentInfoConfigResponse) {
  }
  //返佣模式查询
  rpc AgentMode (AgentModeRequest) returns (AgentModeResponse) {
  }
  //配置介绍页-介绍图片
  rpc AgentInfoImage (AgentInfoImageRequest) returns (AgentInfoImageResponse) {
  }
}

//大厅服务RPC
service RPCService {
  //服务注册
  rpc ServiceRegister (ServiceRegisterRequest) returns (ServiceRegisterResponse) {
  }
  //添加用户
  rpc AddUserService (AddUserRequest) returns (AddUserResponse) {
  }
  //踢用户下线
  rpc KickOutUserService (KickOutUserRequest) returns (KickOutUserResponse) {
  }
  //踢线下分
  rpc KickOutPlatformUserService(KickOutPlatformRequest) returns (KickOutPlatformResponse){
  }
  //更新游戏状态
  rpc UpdateGameService (UpdateGameRequest) returns (UpdateGameResponse) {
  }

  //用户代理模式改变通知
  rpc AgentModeChange (AgentModeChangeRequest) returns (AgentModeChangeResponse) {
  }
}
