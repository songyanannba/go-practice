// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: match_game.proto

package pbs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 牌
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId    int32   `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`    // 标签id
	X        int32   `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`                         //x坐标
	Y        int32   `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`                         //y坐标
	Multiple float32 `protobuf:"fixed32,4,opt,name=multiple,proto3" json:"multiple,omitempty"`          // 标签的倍数
	IsWild   bool    `protobuf:"varint,5,opt,name=is_wild,json=isWild,proto3" json:"is_wild,omitempty"` // 是否百搭
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_match_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_match_game_proto_rawDescGZIP(), []int{0}
}

func (x *Tag) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *Tag) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Tag) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Tag) GetMultiple() float32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *Tag) GetIsWild() bool {
	if x != nil {
		return x.IsWild
	}
	return false
}

// 牌列表
type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags   []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`      //牌id列表
	Amount int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"` //倍数
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_match_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_match_game_proto_rawDescGZIP(), []int{1}
}

func (x *Tags) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tags) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// 步骤流程
type StepFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      int64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                            //索引
	Gain       int64   `protobuf:"varint,2,opt,name=gain,proto3" json:"gain,omitempty"`                              //总赢取
	RemoveList []*Tags `protobuf:"bytes,3,rep,name=remove_list,json=removeList,proto3" json:"remove_list,omitempty"` //移除的牌列表
	AddList    *Tags   `protobuf:"bytes,4,opt,name=add_list,json=addList,proto3" json:"add_list,omitempty"`          //新增的牌
}

func (x *StepFlow) Reset() {
	*x = StepFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepFlow) ProtoMessage() {}

func (x *StepFlow) ProtoReflect() protoreflect.Message {
	mi := &file_match_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepFlow.ProtoReflect.Descriptor instead.
func (*StepFlow) Descriptor() ([]byte, []int) {
	return file_match_game_proto_rawDescGZIP(), []int{2}
}

func (x *StepFlow) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *StepFlow) GetGain() int64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *StepFlow) GetRemoveList() []*Tags {
	if x != nil {
		return x.RemoveList
	}
	return nil
}

func (x *StepFlow) GetAddList() *Tags {
	if x != nil {
		return x.AddList
	}
	return nil
}

// 游戏步骤
type MatchSpinStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32       `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                        //类型 0:普通 1:免费
	Id       int32       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                            //id
	Pid      int32       `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`                          //pid
	SumGain  int64       `protobuf:"varint,4,opt,name=sum_gain,json=sumGain,proto3" json:"sum_gain,omitempty"`   //总赢取
	InitList []*Tags     `protobuf:"bytes,5,rep,name=init_list,json=initList,proto3" json:"init_list,omitempty"` //初始排布
	Flows    []*StepFlow `protobuf:"bytes,6,rep,name=flows,proto3" json:"flows,omitempty"`                       //游戏流程
}

func (x *MatchSpinStep) Reset() {
	*x = MatchSpinStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSpinStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSpinStep) ProtoMessage() {}

func (x *MatchSpinStep) ProtoReflect() protoreflect.Message {
	mi := &file_match_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSpinStep.ProtoReflect.Descriptor instead.
func (*MatchSpinStep) Descriptor() ([]byte, []int) {
	return file_match_game_proto_rawDescGZIP(), []int{3}
}

func (x *MatchSpinStep) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MatchSpinStep) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchSpinStep) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *MatchSpinStep) GetSumGain() int64 {
	if x != nil {
		return x.SumGain
	}
	return 0
}

func (x *MatchSpinStep) GetInitList() []*Tags {
	if x != nil {
		return x.InitList
	}
	return nil
}

func (x *MatchSpinStep) GetFlows() []*StepFlow {
	if x != nil {
		return x.Flows
	}
	return nil
}

// 下注回复
type MatchSpinAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head         *AckHead         `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`                                      //头
	Opt          *SpinOpt         `protobuf:"bytes,2,opt,name=opt,proto3" json:"opt,omitempty"`                                        //下注配置
	TotalWin     int64            `protobuf:"varint,3,opt,name=total_win,json=totalWin,proto3" json:"total_win,omitempty"`             //总赢取
	TotalBet     int64            `protobuf:"varint,4,opt,name=total_bet,json=totalBet,proto3" json:"total_bet,omitempty"`             //总下注
	TotalRaise   int64            `protobuf:"varint,5,opt,name=total_raise,json=totalRaise,proto3" json:"total_raise,omitempty"`       //总加注
	Steps        []*MatchSpinStep `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps,omitempty"`                                    //下注回复
	TxnId        int32            `protobuf:"varint,7,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                      //交易id
	BeforeAmount int64            `protobuf:"varint,8,opt,name=before_amount,json=beforeAmount,proto3" json:"before_amount,omitempty"` //before余额
	AfterAmount  int64            `protobuf:"varint,9,opt,name=after_amount,json=afterAmount,proto3" json:"after_amount,omitempty"`    //after余额
}

func (x *MatchSpinAck) Reset() {
	*x = MatchSpinAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSpinAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSpinAck) ProtoMessage() {}

func (x *MatchSpinAck) ProtoReflect() protoreflect.Message {
	mi := &file_match_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSpinAck.ProtoReflect.Descriptor instead.
func (*MatchSpinAck) Descriptor() ([]byte, []int) {
	return file_match_game_proto_rawDescGZIP(), []int{4}
}

func (x *MatchSpinAck) GetHead() *AckHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *MatchSpinAck) GetOpt() *SpinOpt {
	if x != nil {
		return x.Opt
	}
	return nil
}

func (x *MatchSpinAck) GetTotalWin() int64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *MatchSpinAck) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *MatchSpinAck) GetTotalRaise() int64 {
	if x != nil {
		return x.TotalRaise
	}
	return 0
}

func (x *MatchSpinAck) GetSteps() []*MatchSpinStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *MatchSpinAck) GetTxnId() int32 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *MatchSpinAck) GetBeforeAmount() int64 {
	if x != nil {
		return x.BeforeAmount
	}
	return 0
}

func (x *MatchSpinAck) GetAfterAmount() int64 {
	if x != nil {
		return x.AfterAmount
	}
	return 0
}

var File_match_game_proto protoreflect.FileDescriptor

var file_match_game_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x69, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x69, 0x6c, 0x64, 0x22, 0x41, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x69, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a,
	0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x67, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x61, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x61, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75,
	0x6d, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x61, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xc9, 0x02,
	0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x6b,
	0x12, 0x26, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x64, 0x61, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_game_proto_rawDescOnce sync.Once
	file_match_game_proto_rawDescData = file_match_game_proto_rawDesc
)

func file_match_game_proto_rawDescGZIP() []byte {
	file_match_game_proto_rawDescOnce.Do(func() {
		file_match_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_game_proto_rawDescData)
	})
	return file_match_game_proto_rawDescData
}

var file_match_game_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_match_game_proto_goTypes = []interface{}{
	(*Tag)(nil),           // 0: idaproto.tag
	(*Tags)(nil),          // 1: idaproto.tags
	(*StepFlow)(nil),      // 2: idaproto.step_flow
	(*MatchSpinStep)(nil), // 3: idaproto.match_spin_step
	(*MatchSpinAck)(nil),  // 4: idaproto.match_spin_ack
	(*AckHead)(nil),       // 5: idaproto.ack_head
	(*SpinOpt)(nil),       // 6: idaproto.spin_opt
}
var file_match_game_proto_depIdxs = []int32{
	0, // 0: idaproto.tags.tags:type_name -> idaproto.tag
	1, // 1: idaproto.step_flow.remove_list:type_name -> idaproto.tags
	1, // 2: idaproto.step_flow.add_list:type_name -> idaproto.tags
	1, // 3: idaproto.match_spin_step.init_list:type_name -> idaproto.tags
	2, // 4: idaproto.match_spin_step.flows:type_name -> idaproto.step_flow
	5, // 5: idaproto.match_spin_ack.head:type_name -> idaproto.ack_head
	6, // 6: idaproto.match_spin_ack.opt:type_name -> idaproto.spin_opt
	3, // 7: idaproto.match_spin_ack.steps:type_name -> idaproto.match_spin_step
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_match_game_proto_init() }
func file_match_game_proto_init() {
	if File_match_game_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_match_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSpinStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSpinAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_game_proto_goTypes,
		DependencyIndexes: file_match_game_proto_depIdxs,
		MessageInfos:      file_match_game_proto_msgTypes,
	}.Build()
	File_match_game_proto = out.File
	file_match_game_proto_rawDesc = nil
	file_match_game_proto_goTypes = nil
	file_match_game_proto_depIdxs = nil
}
